From b2f78d838cb76efba438ef07c0fec13a9ef91be2 Mon Sep 17 00:00:00 2001
From: Aleksander Jan Bajkowski <A.Bajkowski@stud.elka.pw.edu.pl>
Date: Tue, 4 May 2021 17:25:24 +0200
Subject: [PATCH 1/2] add support for BE systems

---
 drivers/dma/lgm/lgm-dma.c | 52 +++++++++++++++++++--------------------
 1 file changed, 26 insertions(+), 26 deletions(-)

diff --git a/drivers/dma/lgm/lgm-dma.c b/drivers/dma/lgm/lgm-dma.c
index efe8bd3a0e2a..d5e322b7e979 100644
--- a/drivers/dma/lgm/lgm-dma.c
+++ b/drivers/dma/lgm/lgm-dma.c
@@ -280,11 +280,11 @@ ldma_update_bits(struct ldma_dev *d, u32 mask, u32 val, u32 ofs)
 {
 	u32 old_val, new_val;
 
-	old_val = readl(d->base +  ofs);
+	old_val = __raw_readl(d->base +  ofs);
 	new_val = (old_val & ~mask) | (val & mask);
 
 	if (new_val != old_val)
-		writel(new_val, d->base + ofs);
+		__raw_writel(new_val, d->base + ofs);
 }
 
 static inline struct ldma_chan *to_ldma_chan(struct dma_chan *chan)
@@ -511,7 +511,7 @@ static int ldma_dev_cfg(struct ldma_dev *d)
 	}
 
 	dev_dbg(d->dev, "%s Controller 0x%08x configuration done\n",
-		d->inst->name, readl(d->base + DMA_CTRL));
+		d->inst->name, __raw_readl(d->base + DMA_CTRL));
 
 	return 0;
 }
@@ -525,7 +525,7 @@ static int ldma_chan_cctrl_cfg(struct ldma_chan *c, u32 val)
 
 	spin_lock_irqsave(&d->dev_lock, flags);
 	ldma_update_bits(d, DMA_CS_MASK, c->nr, DMA_CS);
-	reg = readl(d->base + DMA_CCTRL);
+	reg = __raw_readl(d->base + DMA_CCTRL);
 	/* Read from hardware */
 	if (reg & DMA_CCTRL_DIR_TX)
 		c->flags |= DMA_TX_CH;
@@ -539,7 +539,7 @@ static int ldma_chan_cctrl_cfg(struct ldma_chan *c, u32 val)
 	val |= FIELD_PREP(DMA_CCTRL_CLASS, class_low);
 	val &= ~DMA_CCTRL_CLASSH;
 	val |= FIELD_PREP(DMA_CCTRL_CLASSH, class_high);
-	writel(val, d->base + DMA_CCTRL);
+	__raw_writel(val, d->base + DMA_CCTRL);
 	spin_unlock_irqrestore(&d->dev_lock, flags);
 
 	return 0;
@@ -565,11 +565,11 @@ static void ldma_chan_irq_init(struct ldma_chan *c)
 	ldma_update_bits(d, DMA_CS_MASK, c->nr, DMA_CS);
 
 	/* Clear all interrupts and disabled it */
-	writel(0, d->base + DMA_CIE);
-	writel(DMA_CI_ALL, d->base + DMA_CIS);
+	__raw_writel(0, d->base + DMA_CIE);
+	__raw_writel(DMA_CI_ALL, d->base + DMA_CIS);
 
 	ldma_update_bits(d, cn_bit, 0, enofs);
-	writel(cn_bit, d->base + crofs);
+	__raw_writel(cn_bit, d->base + crofs);
 	spin_unlock_irqrestore(&d->dev_lock, flags);
 }
 
@@ -622,7 +622,7 @@ static int ldma_chan_off(struct ldma_chan *c)
 	ldma_update_bits(d, DMA_CCTRL_ON, 0, DMA_CCTRL);
 	spin_unlock_irqrestore(&d->dev_lock, flags);
 
-	ret = readl_poll_timeout_atomic(d->base + DMA_CCTRL, val,
+	ret = readx_poll_timeout_atomic(__raw_readl, d->base + DMA_CCTRL, val,
 					!(val & DMA_CCTRL_ON), 0, 10000);
 	if (ret)
 		return ret;
@@ -640,7 +640,7 @@ static void ldma_chan_desc_hw_cfg(struct ldma_chan *c, dma_addr_t desc_base,
 
 	spin_lock_irqsave(&d->dev_lock, flags);
 	ldma_update_bits(d, DMA_CS_MASK, c->nr, DMA_CS);
-	writel(lower_32_bits(desc_base), d->base + DMA_CDBA);
+	__raw_writel(lower_32_bits(desc_base), d->base + DMA_CDBA);
 
 	/* Higher 4 bits of 36 bit addressing */
 	if (IS_ENABLED(CONFIG_64BIT)) {
@@ -649,7 +649,7 @@ static void ldma_chan_desc_hw_cfg(struct ldma_chan *c, dma_addr_t desc_base,
 		ldma_update_bits(d, DMA_CDBA_MSB,
 				 FIELD_PREP(DMA_CDBA_MSB, hi), DMA_CCTRL);
 	}
-	writel(desc_num, d->base + DMA_CDLEN);
+	__raw_writel(desc_num, d->base + DMA_CDLEN);
 	spin_unlock_irqrestore(&d->dev_lock, flags);
 
 	c->desc_init = true;
@@ -707,7 +707,7 @@ static int ldma_chan_reset(struct ldma_chan *c)
 	ldma_update_bits(d, DMA_CCTRL_RST, DMA_CCTRL_RST, DMA_CCTRL);
 	spin_unlock_irqrestore(&d->dev_lock, flags);
 
-	ret = readl_poll_timeout_atomic(d->base + DMA_CCTRL, val,
+	ret = readx_poll_timeout_atomic(__raw_readl, d->base + DMA_CCTRL, val,
 					!(val & DMA_CCTRL_RST), 0, 10000);
 	if (ret)
 		return ret;
@@ -847,11 +847,11 @@ static int ldma_port_cfg(struct ldma_port *p)
 	}
 
 	spin_lock_irqsave(&d->dev_lock, flags);
-	writel(p->portid, d->base + DMA_PS);
-	writel(reg, d->base + DMA_PCTRL);
+	__raw_writel(p->portid, d->base + DMA_PS);
+	__raw_writel(reg, d->base + DMA_PCTRL);
 	spin_unlock_irqrestore(&d->dev_lock, flags);
 
-	reg = readl(d->base + DMA_PCTRL); /* read back */
+	reg = __raw_readl(d->base + DMA_PCTRL); /* read back */
 	dev_dbg(d->dev, "Port Control 0x%08x configuration done\n", reg);
 
 	return 0;
@@ -1005,9 +1005,9 @@ static void ldma_chan_irq_en(struct ldma_chan *c)
 	unsigned long flags;
 
 	spin_lock_irqsave(&d->dev_lock, flags);
-	writel(c->nr, d->base + DMA_CS);
-	writel(DMA_CI_EOP, d->base + DMA_CIE);
-	writel(BIT(c->nr), d->base + DMA_IRNEN);
+	__raw_writel(c->nr, d->base + DMA_CS);
+	__raw_writel(DMA_CI_EOP, d->base + DMA_CIE);
+	__raw_writel(BIT(c->nr), d->base + DMA_IRNEN);
 	spin_unlock_irqrestore(&d->dev_lock, flags);
 }
 
@@ -1104,13 +1104,13 @@ static void dma_chan_irq(int irq, void *data)
 	u32 stat;
 
 	/* Disable channel interrupts  */
-	writel(c->nr, d->base + DMA_CS);
-	stat = readl(d->base + DMA_CIS);
+	__raw_writel(c->nr, d->base + DMA_CS);
+	stat = __raw_readl(d->base + DMA_CIS);
 	if (!stat)
 		return;
 
-	writel(readl(d->base + DMA_CIE) & ~DMA_CI_ALL, d->base + DMA_CIE);
-	writel(stat, d->base + DMA_CIS);
+	__raw_writel(__raw_readl(d->base + DMA_CIE) & ~DMA_CI_ALL, d->base + DMA_CIE);
+	__raw_writel(stat, d->base + DMA_CIS);
 	queue_work(d->wq, &c->work);
 }
 
@@ -1121,7 +1121,7 @@ static irqreturn_t dma_interrupt(int irq, void *dev_id)
 	unsigned long irncr;
 	u32 cid;
 
-	irncr = readl(d->base + DMA_IRNCR);
+	irncr = __raw_readl(d->base + DMA_IRNCR);
 	if (!irncr) {
 		dev_err(d->dev, "dummy interrupt\n");
 		return IRQ_NONE;
@@ -1129,9 +1129,9 @@ static irqreturn_t dma_interrupt(int irq, void *dev_id)
 
 	for_each_set_bit(cid, &irncr, d->chan_nrs) {
 		/* Mask */
-		writel(readl(d->base + DMA_IRNEN) & ~BIT(cid), d->base + DMA_IRNEN);
+		__raw_writel(__raw_readl(d->base + DMA_IRNEN) & ~BIT(cid), d->base + DMA_IRNEN);
 		/* Ack */
-		writel(readl(d->base + DMA_IRNCR) | BIT(cid), d->base + DMA_IRNCR);
+		__raw_writel(__raw_readl(d->base + DMA_IRNCR) | BIT(cid), d->base + DMA_IRNCR);
 
 		c = &d->chans[cid];
 		dma_chan_irq(irq, c);
@@ -1606,7 +1606,7 @@ static int intel_ldma_probe(struct platform_device *pdev)
 		return ret;
 	}
 
-	id = readl(d->base + DMA_ID);
+	id = __raw_readl(d->base + DMA_ID);
 	d->chan_nrs = FIELD_GET(DMA_ID_CHNR, id);
 	d->port_nrs = FIELD_GET(DMA_ID_PNR, id);
 	d->ver = FIELD_GET(DMA_ID_REV, id);
-- 
2.20.1

